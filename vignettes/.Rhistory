biocLite("knitr")
library(knitr)
install.packages("knitr")
library(knitr)
warnings()
write.table
library("BiocInstaller", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
biocLite("knitr")
library("knitr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("BiocInstaller", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
biocLIte("pRoloc")
biocLite("pRoloc")
library("pRoloc")
biocLite("MSnbase")
biocLite("mzR")
nchar("Ich liebe es, Rätsel und Probleme zu lösen.")
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("pRoloc", "pRolocdata", "pRolocGUI"))
library(pRolocGUI)
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("pRoloc", "pRolocdata", "pRolocGUI"))
library(MetabolomicTools)
load(system.file("data/sd01_outputXCMS.Rdata", package = "MetabolomicTools"))
load(system.file("data/sd02_deconvoluted.Rdata", package = "MetabolomicTools"))
## identify precursor mz
finalMSP <- convert2MSP(sd02_deconvoluted, split = " _ ", splitInd = 2)
finalMSP
load(system.file("data/idMSMStissueproject.Rdata",
package = "MetabolomicTools"))
## change tissue to format that it is compatible with writeMSP
## sd02_deconvoluted
## 1st column: mz, 2nd column: rt, 3rd column: intensity,
## 4th column: pcgroup_precursorMZ
newtissue <- tissue
newtissue[,2] <- tissue[,3]; colnames(newtissue)[2] <- colnames(tissue)[3]
newtissue[,3] <- tissue[,2]; colnames(newtissue)[3] <- "intensity"
newtissue[,4] <- tissue[,7]; colnames(newtissue)[4] <- colnames(tissue)[7]
newtissue <- newtissue[,1:4]
tissue <- newtissue
finalMSP <- convert2MSP(tissue, split = "_", splitInd=1)
finalMSP
uniquePreMZ_cut <- .cutUniquePreMZ(sd02_deconvoluted[,4], splitPattern=" _ ", splitInd=2)
msp <- finalMSP
binnedMSP <- binning(msp, tol = 0.01)
length(indPeaks) > indLosses)
msp
indPeaks <- which(msp[,1] == "Num Peaks: ")
indLosses <- which(msp[,1] == "Num Losses: ")
if (length(indPeaks) > indLosses) indNumPeaks <- indPeaks
if (length(indPeaks) > length(indLosses)) indNumPeaks <- indPeaks
if (length(indPeaks) > length(indLosses)) indNumPeaks <- indPeaks
if (length(indPeaks) <= length(indLosses)) indNumPeaks <- indLosses
indNumPeaks
if (length(indPeaks) > length(indLosses)) indNumPeaks <- indPeaks
## <=: to get all possibilities
if (length(indPeaks) <= length(indLosses)) indNumPeaks <- indLosses
indNumPeaks
length(indPeaks) <= length(indLosses)
length(indPeaks) > length(indLosses)
install_github(repo = "MetabolomicTools", username = "PlantDefenseMetabolism")
library(devtools)
install_github(repo = "MetabolomicTools", username = "PlantDefenseMetabolism")
library(MetabolomicTools)
library(MetabolomicTools)
uniquePreMZ_cut <- cutUniquePreMZ(sd02_deconvoluted[,4], splitPattern=" _ ",
splitInd=2)
finalCluster <- allocatePrecursor2mz(sd01 = sd01_outputXCMS,
uniquePreMZ_cut <- MetabolomicTools:::cutUniquePreMZ(sd02_deconvoluted[,4], splitPattern=" _ ",
splitInd=2)
uniquePreMZ_cut
finalCluster <- allocatePrecursor2mz(sd01 = sd01_outputXCMS,
sd02 = sd02_deconvoluted, rtCheck = 60, mzVsRTbalance = 1000)
msp <- finalMSP
binnedMSP <- binning(msp, tol = 0.01)
binnedMSP
similarityMat <- createSimilarityMatrix(binnedMSP)
similarityMat
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library(circlize); library(scales) #
namesPrec <- rownames(binnedMSP)
namesPrec
compartment <- sample(c("yl", "ol", "s","r"), size = length(namesPre5
replace=TRUE)
## yl = young leaf, ol = old leaf, s = stem, r = root
compartment <- sample(c("yl", "ol", "s","r"), size = length(namesPrec),                                                            replace=TRUE)
## change name
if (length(unique(namesPrec)) == length(namesPrec)) {
namesPrec <- paste(compartment, namesPrec, sep="_")
} else {
namesPrec <- paste(compartment, namesNL,
sprintf("%04d", 1:length(namesPrec), sep="_"))
}
dfNameGroup <- data.frame(group = compartment, name = namesPrec)
## order according to compartment
dfNameGroup <- dfNameGroup[order(dfNameGroup[,"name"]),]
linkMat <- createLinkMatrix(similarityMatrix = similarityMat, threshold=0.5,
dfNameGroup = dfNameGroup)
selectedFeatures <- shinyCircos(dfNameGroup, similarityMat)
dim(dfNameGroup)
finalMSP
selectedFeatures <- shinyCircos(dfNameGroup, similarityMat)
selectedFeatures
plotCircos(dfNameGroup, linkMat, initialize = TRUE, featureNames = TRUE,
cexFeatureNames = 0.2, groupName = TRUE, links = FALSE, highlight = TRUE)
circos.par(gap.degree = 0, cell.padding = c(0.0, 0, 0.0, 0), track.margin = c(0.0, 0))
plotCircos(dfNameGroup, linkMat, initialize = TRUE, featureNames = TRUE,
cexFeatureNames = 0.2, groupName = TRUE, links = FALSE, highlight = TRUE)
indSelected <- which(selectedFeatures == dfNameGroup[,"name"])
indSelected
indSelected <- which(dfNameGroup[,"name"] == selectedFeatures
)
dfNameGroup$name == selectedFeatures
dfNameGroup$name
selectedFeatures
which(dfNameGroup$name == selectedFeatures)
match(dfNameGroup$name, selectedFeatures)
which(match(dfNameGroup$name, selectedFeatures))
match(dfNameGroup$name == selectedFeatures)
which(dfNameGroup$name == selectedFeatures)
apply(selectedFeatures, dfNameGroup$name, which)
apply(selectedFeatures, dfNameGroup$name, 2, which)
mapply(selectedFeatures, dfNameGroup$name, 2, which)
mapply(which, selectedFeatures, dfNameGroup$name)
mapply(function(x) which(x == dfNameGroup$name), selectedFeatures)
indSelected <- mapply(function(x) which(x == dfNameGroup$name), selectedFeatures)
indSelected <- as.numeric(indSelected)
indSelected
highlight(dfNameGroup = dfNameGroup, ind = indSelected, LinkMatrix = linkMat)
linkMat <- createLinkMatrix(similarityMatrix = similarityMat, threshold=0.95,
dfNameGroup = dfNameGroup)
linkMat_cut <- cutLinkMatrix(linkMat, type = "inter")
plotCircos(dfNameGroup, linkMat_cut, initialize = TRUE, featureNames = TRUE,
cexFeatureNames = 0.2, groupName = TRUE, links = FALSE, highlight = TRUE)
indSelected <- mapply(function(x) which(x == dfNameGroup$name), selectedFeatures)
indSelected <- as.numeric(indSelected)
highlight(dfNameGroup = dfNameGroup, ind = indSelected, LinkMatrix = linkMat_cut)
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library(MetabolomicTools)
vignette(package="MetabolomicTools")
library(MetabolomicTools)
vignette(package="MetabolomicTools")
browseVignettes(package = "MetabolomicTools")
library(MetabolomicTools)
vignette(package="MetabolomicTools")
remove.packages("MetabolomicTools", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
similarityMatNL <- createSimilarityMatrix(binnedMSPNL)
similarityMat <- createSimilarityMatrix(binnedMSP)
binnedMSPNL <- binning(nlMSP, tol = 0.01)
binnedMSPNL <- binning(msp = , tol = 0.01)
binnedMSPNL <- binning(msp = finalMSP, tol = 0.01)
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
load(system.file("data/binnedMSP.RData", package = "MetabolomicTools"))
binnedMSP
head(binnedMSP)
is(binnedMSP)
similarityMat <- createSimilarityMatrix(binnedMSP)
similarityMat[1:10,1:10]
is(similarityMat[1:10,1:10])
library(amap)
hClustMSP <- hcluster(similarityMat, method = "spearman")
hClustMSP
plot(hClustMSP, labels = FALSE)
colnames(similarityMat)[hClustMSP$order]
?scale
hclust(similarityMat)
hclust(similarityMat, method = "complete")
?dist
hClustMSP <- hcluster(similarityMat, method = "euclidean")
plot(hClustMSP, labels = FALSE)
hClustMSP <- hcluster(similarityMat, method = "pearson")
plot(hClustMSP, labels = FALSE)
colnames(similarityMat)[hClustMSP$order]
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
hClustMSP <- hcluster(similarityMat, method = "spearman")
plot(hClustMSP, labels = FALSE)
plot(hClustMSP, labels = FALSE,ylab="")
plot(hClustMSP, labels = FALSE,xlab="")
plot(hClustMSP, labels = FALSE)#,xlab="")
plot(hClustMSP, labels = FALSE,xlab="",sub="")
getwd()
setwd("R/MetabolomicTools/vignettes/")
knit("MetabolomicTools.Rnw")
library(knitr)
knit("MetabolomicTools.Rnw")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
R.session()
sessionInfo()
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("~/R/MetabolomicTools_0.98.0.tar.gz", repos = NULL, type = "source")
detach("package:MetabolomicTools", unload=TRUE)
library("MetabolomicTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
createLinkMatrix(similarityMat, threshold = 0, dfNameGroup)
ex <- createLinkMatrix(similarityMat, threshold = 0, dfNameGroup)
360 * 360
dim(ex)
similarityMat
linkMat
dfNameGroup
rownames(similarityMat)
linkMat
dfNameGroup
dfName[1]
dfName <- dfNameGroup[,2]
dfName[1]
which(dfName[1] == dfName)
newDfName <- dfName[-which(as.character(dfName[i]) == dfName)]
newDfName
if (length(unique(namesPrec)) == length(namesPrec)) {
namesPrec <- namesPrec
} else {
namesPrec <- paste(namesPrec,
sprintf("%04d", 1:length(namesPrec), sep="_"))
}
dfNameGroup <- data.frame(group = compartment, name = namesPrec)
dfNameGroup
dfNameGroup <- dfNameGroup[order(dfNameGroup[,"compartment"]),]
order(dfNameGroup[,"compartment"])
dfNameGroup <- dfNameGroup[order(dfNameGroup[,"group"]),]
dfNameGroup
namesPrec
namesPrec <- rownames(binnedMSP)
compartment <- sample(c("yl", "ol", "s","r"), size = length(namesPrec),
replace=TRUE)
if (length(unique(namesPrec)) == length(namesPrec)) {
namesPrec <- namesPrec
} else {
namesPrec <- paste(namesPrec,
sprintf("%04d", 1:length(namesPrec), sep="_"))
}
dfNameGroup <- data.frame(group = compartment, name = namesPrec)
dfNameGroup <- dfNameGroup[order(dfNameGroup[,"group"]),]
dfName
dfNameGroup
which(newDfName == dfName)
dfName <- dfNameGroup[,2]
dfName
newDfName <- dfName[-which(as.character(dfName[i]) == dfName)]
newDfName
match(newDfName, dfName)
match(dfName, newDfName)
newDfName
DfName
dfName
as.character(dfName[i])
i
i
match(dfName, newDfName)
which(dfName == newDfName)
i <- 250
newDfName <- dfName[-which(as.character(dfName[i]) == dfName)]
which(dfName == newDfName)
match(dfName, newDfName)
match(newDfName, dfName)
dfName <- colnames(similarityMatrix)
dfName <- colnames(similarityMat)
dfName
name
name <- colnames(similarityMatrix)
name <- colnames(similarityMat)
name <- rownames(similarityMatrix)
name <- rownames(similarityMat)
name
i
newName <- name[-which(as.character(name[i]) == name)]
newName
name
newName <- name[i]
newName
similarityMat[newName,]
newName <- name[-which(as.character(nameI) == name)]
nameI <- name[i]
newName <- name[-which(as.character(nameI) == name)]
newName
similarityMat[nameI,newName]
colnames(similarityMat[nameI,newName])
names(similarityMat[nameI,newName])
similarity <- as.numeric(entry)
entry <- similarityMat[nameI,newName]
similarity <- as.numeric(entry)
similarity
entryI <- matrix(data = NA, ncol = 5, nrow = length(name) - 1)
entryI
entryI[,5]  <- as.numeric(entry)
entryI
names(entry)
names(entry) == newName
dfNameGroup
entryI <- matrix(data = c(nameI, NA, NA, NA, NA), ncol = 5, nrow = length(name) - 1)
entryI
entryI <- matrix(data = c(nameI, NA, NA, NA, NA), ncol = 5, nrow = length(name) - 1, byrow=TRUE)
entryI
entryI <- matrix(data = c(compartmentI,nameI, NA, newName, NA), ncol = 5, nrow = length(name) - 1, byrow=TRUE)
compartmentI <- "ol"
entryI <- matrix(data = c(compartmentI,nameI, NA, newName, NA), ncol = 5, nrow = length(name) - 1, byrow=TRUE)
similarityMat[nameI,newName]
entryI[,5] <- similarityMat[nameI,newName]
entryI
newName
newName <- name[-which(as.character(nameI) == name)]
match(dfNameGroup[,2], newName)
dfNameGroup[indComp,1]
indComp <- match(dfNameGroup[,2], newName)
dfNameGroup[indComp,1]
indComp <- match(dfNameGroup[,2], newName)
indComp
indComp <- match(newName, dfNameGroup[,2])
indComp
indComp <- match(newName, dfNameGroup[,2])
dfNameGroup[indComp,1]
indComp
newName
dfNameGroup[266,]
dfNameGroup[indComp,1][1]
colnames(dfNameGroup)
colnames(dfNameGroup) == c("group", "name")
all(colnames(dfNameGroup) == c("group", "name"))
sort(dfName) != sort(colnames(similarityMatrix))
sort(dfName) != sort(colnames(similarityMat))
all(sort(dfName) ==sort(colnames(similarityMat)))
for (i in 1:length(name)) {
compartmentI <- "ol"
entryI <- matrix(data = c(compartmentI,nameI, NA, NA, NA), ncol = 5, nrow = length(name) - 1, byrow=TRUE)
nameI <- name[i]
newName <- name[-which(as.character(nameI) == name)]
## group of second feature
indComp <- match(newName, dfName)
entry[,3] <- dfNameGroup[indComp,1]
## m/z / retention time of second feature
entry[,4] <- newName
## similarity
entryI[,5] <- as.numeric(similarityMat[nameI,newName])
}
i
nameI
which(nameI == dfName)
which(dfName == nameI)
i <- 3
nameI <- name[i]
i <- 3
which(dfName == nameI)
which(nameI == dfName)
dfNameGroup[which(nameI == dfName),1]
for (i in 1:length(name)) {
nameI <- name[i]
nameI <- name[i]
comparttmentI <- dfNameGroup[which(nameI == dfName),1]
entryI <- matrix(data = c(compartmentI,nameI, NA, NA, NA), ncol = 5, nrow = length(name) - 1, byrow=TRUE)
entryI
newName <- name[-which(as.character(nameI) == name)]
## group of second feature
indComp <- match(newName, dfName)
entry[,3] <- dfNameGroup[indComp,1]
## m/z / retention time of second feature
dfNameGroup[indComp,1]
length(dfNameGroup[indComp,1])
indComp <- match(newName, dfName)
indComp
entryI[,3] <- dfNameGroup[indComp,1]
## m/z / retention time of second feature
entryI[,4] <- newName
## similarity
entryI[,5] <- as.numeric(similarityMat[nameI,newName])
entryI
dim(entryI)
359 * 2
mat[(359 * (i - 1) + 1):(359*i),]
mat <- matrix(data = NA, ncol = 5, nrow = (length(name)^ 2 - length(name)))
mat[(359 * (i - 1) + 1):(359*i),]
mat[(359 * (i - 1) + 1):(359*i),]
for (i in 1:length(name)) {
nameI <- name[i]
comparttmentI <- dfNameGroup[which(nameI == dfName),1]
entryI <- matrix(data = c(compartmentI,nameI, NA, NA, NA), ncol = 5, nrow = length(name) - 1, byrow=TRUE)
newName <- name[-which(as.character(nameI) == name)]
## group of second feature
indComp <- match(newName, dfName)
entryI[,3] <- dfNameGroup[indComp,1]
## m/z / retention time of second feature
entryI[,4] <- newName
## similarity
entryI[,5] <- as.numeric(similarityMat[nameI,newName])
## write to mat
mat[(359 * (i - 1) + 1):(359*i),] <- entryI
}
mat
tail(mat)
mat[,2]
paste(c(mat[,2], mat[,4]))
paste(c(mat[,2], mat[,4]), sep=" ")
paste(mat[,2], mat[,4], sep=" ")
paste(mat[,2], mat[,4], sep=" ") == paste(mat[,2], mat[,4], sep=" ")
duplicated(mat)
which(duplicated(mat))
which(duplicated(mat[,c(2,4)]))
x <- c(9:20, 1:5, 3:7, 0:8)
x
(xu <- x[!duplicated(x)])
unique(x)
unique(c(paste(mat[,2], mat[,4], sep=" "), paste(mat[,2], mat[,4], sep=" ")))
dim(mat)
unique(c(paste(mat[,2], mat[,4], sep=" "), paste(mat[,4], mat[,2], sep=" ")))
duplicated(c(paste(mat[,2], mat[,4], sep=" "), paste(mat[,4], mat[,2], sep=" ")))
dim(mat)
similarityMat <- similarityMat[1:10,1:10]
dfNameGroup
dfNameGroup <- data.frame(group = compartment, name = namesPrec)
dfNameGroup
similarityMat
dfNameGroup <- dfNameGroup[1:10]
dfNameGroup <- dfNameGroup[1:10,]
if (!all(colnames(similarityMatrix) == rownames(similarityMatrix))) {
stop("colnames(similarityMatrix) != rownames(similarityMatrix)")
}
similarityMatrix <- similarityMat
if (!all(colnames(similarityMatrix) == rownames(similarityMatrix))) {
stop("colnames(similarityMatrix) != rownames(similarityMatrix)")
}
if (!all(colnames(dfNameGroup) == c("group", "name"))) {
stop("colnames of argument dfNameGroup are not group and name")
}
dfName <- dfNameGroup[,2]
if (!all(sort(dfName) != sort(colnames(similarityMatrix)))) {
stop("dfNameGroup[,'name'] != colnames(similarityMatrix) ")
}
sort(dfName)
sort(colnames(similarityMatrix))
if (!all(sort(dfName) == sort(colnames(similarityMatrix)))) {
stop("dfNameGroup[,'name'] != colnames(similarityMatrix) ")
}
name <- rownames(similarityMatrix)
mat <- matrix(data = NA, ncol = 5, nrow = (length(name)^ 2 - length(name)))
mat
for (i in 1:length(name)) {
nameI <- name[i]
comparttmentI <- dfNameGroup[which(nameI == dfName),1]
entryI <- matrix(data = c(compartmentI,nameI, NA, NA, NA), ncol = 5, nrow = length(name) - 1, byrow=TRUE)
newName <- name[-which(as.character(nameI) == name)]
## group of second feature
indComp <- match(newName, dfName)
entryI[,3] <- dfNameGroup[indComp,1]
## m/z / retention time of second feature
entryI[,4] <- newName
## similarity
entryI[,5] <- as.numeric(similarityMat[nameI,newName])
## write to mat
mat[(359 * (i - 1) + 1):(359*i),] <- entryI
}
name
for (i in 1:length(name)) {
nameI <- name[i]
comparttmentI <- dfNameGroup[which(nameI == dfName),1]
entryI <- matrix(data = c(compartmentI,nameI, NA, NA, NA), ncol = 5, nrow = length(name) - 1, byrow=TRUE)
newName <- name[-which(as.character(nameI) == name)]
## group of second feature
indComp <- match(newName, dfName)
entryI[,3] <- dfNameGroup[indComp,1]
## m/z / retention time of second feature
entryI[,4] <- newName
## similarity
entryI[,5] <- as.numeric(similarityMat[nameI,newName])
## write to mat
mat[((length(name)-1) * (i - 1) + 1):((length(name)-1)*i),] <- entryI
}
mat
paste(mat[,2], mat[,4], sep=" ")
paste(mat[,4], mat[,2], sep=" ")
lapply(paste(mat[,2], mat[,4], sep=" "), function(x) x == paste(mat[,4], mat[,2], sep=" "))
paste(mat[,2], mat[,4], sep=" ")
paste(mat[,2], mat[,4], sep=" ")[1]
match(paste(mat[,2], mat[,4], sep="_")[1], paste(mat[,4], mat[,2], sep="_"))
match(paste(mat[,2], mat[,4], sep="_")[1], paste(mat[,2], mat[,4], sep="_"))
mat
lappy(paste(mat[,2], mat[,4], sep="_"), function(x) match(x, paste(mat[,2], mat[,4], sep="_")))
lapply(paste(mat[,2], mat[,4], sep="_"), function(x) match(x, paste(mat[,2], mat[,4], sep="_")))
lapply(paste(mat[,2], mat[,4], sep="_"), function(x) match(x, paste(mat[,4], mat[,2], sep="_")))
mat
indDuplicates <- lapply(paste(mat[,2], mat[,4], sep="_"),
function(x) match(x, paste(mat[,4], mat[,2], sep="_")))
indDuplicates <- unlist(indDuplicates)
indDuplicates
mat[-indDuplcates, ]
mat[-indDuplicates, ]
iindDuplicates
indDuplicates
mat
mat[-indDuplicates, ]
indDuplicates
